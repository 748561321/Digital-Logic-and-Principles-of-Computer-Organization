
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp5_board(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5
);

//实验五推荐的分配方式：4个SW共用地址端、4个SW共用写入数据端、2个SW分别寄存器堆和RAM的写使能端、1个按键共用时钟信号
//RAM 单元。此两个物理上完全不同的存储器共用时钟、读写地址。
//适当选择时钟信号和写使能信号，以能够分别对此两个存储器进行读写。
//请将两个存储器读出的结果分别用 2 个七段数码管显示。
//请合理使用 FPGA 开发板的输入/输出资源，完成此寄存器堆和 RAM 的设计。
//由于开发板上输入数量不够，写入时可以只写入 2 位数据。
//请使用开发板上的按钮来做为存储器的时钟信号。观察两个不同的实现方式下各需要几个时钟周期来完成读取或写入操作？


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire [7:0] a;

regfile re(
	SW [7:4], //地址端
	SW [3:0], //数据端
	SW [8],  //使能端 
	KEY[0],  //时钟信号
	a //输出端
	);
	
bcd7seg bc(a[3:0],HEX0);
bcd7seg bc2(a[7:4],HEX1);

wire [7:0] b;
ram1port ram(
	SW [7:4],
	KEY[0],
	SW [3:0],
	SW [9],
	b);
bcd7seg bc3(b[3:0],HEX2);
bcd7seg bc4(b[7:4],HEX3);

//=======================================================
//  Structural coding
//=======================================================



endmodule
