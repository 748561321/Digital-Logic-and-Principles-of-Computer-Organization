
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp12(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

// cpu_part
wire cpu_clk;

clkgen #(25000000) my_cpuclk(CLOCK_50, SW[0], 1'b1, cpu_clk);

wire [31:0] imemaddr;
wire [31:0] imemdataout;
wire imemclk;
wire [31:0] dmemaddr;
wire [31:0] dmemdataout;
wire [31:0] dmemdatain;
wire dmemrdclk;
wire dmemwrclk;
wire [2:0] dmemop;
wire dmemwe;
wire [31:0] dbgdata;

rv32is my_cpu(cpu_clk, SW[1], imemaddr, imemdataout, imemclk, dmemaddr, dmemdataout, dmemdatain, dmemrdclk, dmemwrclk, dmemop, dmemwe, dbgdata);


// data_choose
assign dmemdataout = (dmemaddr[31:20]==12'h1)?(dmemdata):
							(dmemaddr[31:20]==12'h3)?({{24{1'b0}},kmemdata}): 
							(dmemaddr[31:20]==12'h4)?(rmemdata): 32'b0;


// imem_part
imem my_imem(imemaddr[16:2], imemclk, imemdataout);


// dmem_part
wire [31:0] dmemdata;
wire dmemwe_real;

assign dmemwe_real = (dmemaddr[31:20]==12'h1)? dmemwe : 1'b0;

datamem my_datamem(dmemop, dmemdatain, dmemaddr[16:0], dmemrdclk, dmemaddr[16:0], dmemwrclk, dmemwe_real, dmemdata);


// keyboard_part
wire [7:0] kmemdata;
wire [7:0] dbg_key;
wire [7:0] dbg_data;
wire [7:0] dbg_code;
wire kwe;
assign kwe = (dmemaddr[31:20]==12'h3)? 1 : 0;
keyboard my_keyboard(dmemrdclk, KEY[0], dmemaddr[19:0], PS2_CLK, PS2_DAT, kwe, kmemdata, dbg_key, dbg_data, dbg_code);


// vga_part
clkgen #(25000000) my_vgaclk(CLOCK_50, SW[0], 1'b1, VGA_CLK);

wire vmemwe;
assign vmemwe = (dmemaddr[31:19]==13'h4)? dmemwe : 1'b0;
wire color_wren;
assign color_wren = (dmemaddr[31:19]==13'h5)? dmemwe : 1'b0;

vga my_vga(VGA_CLK, dmemwrclk, vmemwe, color_wren, dmemaddr, dmemdatain, line[5:0], VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N,
	        VGA_R, VGA_G, VGA_B, dmemop);

// special_reg part
wire [5:0] line;
wire smemwe;
wire [31:0] rmemdata;
assign smemwe = (dmemaddr[31:20]==12'h4)? dmemwe : 1'b0;

special_reg myspecial(dmemrdclk, dmemwrclk, dmemaddr, smemwe, dmemdatain, rmemdata, line);


// led_ctrl part
wire [9:0] led_;
wire lmemwe;
assign lmemwe = (dmemaddr[31:20]==12'h5)? dmemwe : 1'b0;

led_ctrl myled(dmemwrclk, dmemaddr, lmemwe, dmemdatain, led_);

assign LEDR[9:0] = led_[9:0];


// bcd7seg_ctrl part
//wire bcdmemwe;
//assign bcdmemwe = (dmemaddr[31:20]==12'h6)? dmemwe : 1'b0;
//
//bcd_ctrl mybcd(dmemwrclk, dmemaddr, bcdmemwe, dmemdatain, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6);


bcd7seg bcd_a(dbg_code[7:0], HEX0, HEX1);
bcd7seg bcd_b(dbg_data[7:0], HEX2, HEX3);
bcd7seg bcd_c(dbg_key[7:0], HEX4, HEX5);


			  

//=======================================================
//  Structural coding
//=======================================================



endmodule
